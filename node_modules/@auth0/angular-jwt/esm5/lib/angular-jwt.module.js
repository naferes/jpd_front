import { __decorate, __metadata, __param } from "tslib";
import { NgModule, Optional, SkipSelf, } from "@angular/core";
import { HTTP_INTERCEPTORS } from "@angular/common/http";
import { JwtInterceptor } from "./jwt.interceptor";
import { JWT_OPTIONS } from "./jwtoptions.token";
import { JwtHelperService } from "./jwthelper.service";
import * as ɵngcc0 from '@angular/core';
;
var JwtModule = /** @class */ (function () {
    function JwtModule(parentModule) {
        if (parentModule) {
            throw new Error("JwtModule is already loaded. It should only be imported in your application's main module.");
        }
    }
    JwtModule_1 = JwtModule;
    JwtModule.forRoot = function (options) {
        return {
            ngModule: JwtModule_1,
            providers: [
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: JwtInterceptor,
                    multi: true,
                },
                options.jwtOptionsProvider || {
                    provide: JWT_OPTIONS,
                    useValue: options.config,
                },
                JwtHelperService,
            ],
        };
    };
    var JwtModule_1;
    JwtModule.ctorParameters = function () { return [
        { type: JwtModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    JwtModule = JwtModule_1 = __decorate([ __param(0, Optional()), __param(0, SkipSelf()),
        __metadata("design:paramtypes", [JwtModule])
    ], JwtModule);
JwtModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: JwtModule });
JwtModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function JwtModule_Factory(t) { return new (t || JwtModule)(ɵngcc0.ɵɵinject(JwtModule, 12)); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JwtModule, [{
        type: NgModule
    }], function () { return [{ type: JwtModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }]; }, null); })();
    return JwtModule;
}());
export { JwtModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1qd3QubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZzovQGF1dGgwL2FuZ3VsYXItand0L2xpYi9hbmd1bGFyLWp3dC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxRQUFRLEVBRVIsUUFBUSxFQUNSLFFBQVEsR0FFVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDOztBQVl0RCxDQUFDO0FBUUY7QUFDb0IsSUFBbEIsbUJBQW9DLFlBQXVCO0FBQzdELFFBQUksSUFBSSxZQUFZLEVBQUU7QUFDdEIsWUFBTSxNQUFNLElBQUksS0FBSyxDQUNiLDRGQUE0RixDQUM3RixDQUFDO0FBQ1IsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILGtCQVJhLFNBQVM7QUFBRSxJQVFmLGlCQUFPLEdBQWQsVUFBZSxPQUF5QjtBQUFJLFFBQzFDLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxXQUFTO0FBQ3pCLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLGlCQUFpQjtBQUNwQyxvQkFBVSxRQUFRLEVBQUUsY0FBYztBQUNsQyxvQkFBVSxLQUFLLEVBQUUsSUFBSTtBQUNyQixpQkFBUztBQUNULGdCQUFRLE9BQU8sQ0FBQyxrQkFBa0IsSUFBSTtBQUN0QyxvQkFBVSxPQUFPLEVBQUUsV0FBVztBQUM5QixvQkFBVSxRQUFRLEVBQUUsT0FBTyxDQUFDLE1BQU07QUFDbEMsaUJBQVM7QUFDVCxnQkFBUSxnQkFBZ0I7QUFDeEIsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNGO0FBQ21CO0FBQXNELGdCQXpCdEIsU0FBUyx1QkFBOUMsUUFBUSxZQUFJLFFBQVE7QUFBTTtBQUFVLElBRHRDLFNBQVMsc0NBRHJCLFFBQVEsRUFBRSxuQkFDSCxDQUNPLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLFFBQVEsRUFBRSxDQUFBO0FBQUUseUNBQWEsU0FBUztBQUFHLE9BRG5ELFNBQVMsQ0F5QnJCOzs7Ozs7Ozs7a0NBQ0Q7QUFBQyxJQURELGdCQUFDO0FBQ0EsQ0FEQSxBQXpCRCxJQXlCQztBQUNELFNBMUJhLFNBQVM7QUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBOZ01vZHVsZSxcbiAgTW9kdWxlV2l0aFByb3ZpZGVycyxcbiAgT3B0aW9uYWwsXG4gIFNraXBTZWxmLFxuICBQcm92aWRlcixcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuaW1wb3J0IHsgSnd0SW50ZXJjZXB0b3IgfSBmcm9tIFwiLi9qd3QuaW50ZXJjZXB0b3JcIjtcbmltcG9ydCB7IEpXVF9PUFRJT05TIH0gZnJvbSBcIi4vand0b3B0aW9ucy50b2tlblwiO1xuaW1wb3J0IHsgSnd0SGVscGVyU2VydmljZSB9IGZyb20gXCIuL2p3dGhlbHBlci5zZXJ2aWNlXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSnd0Q29uZmlnIHtcbiAgdG9rZW5HZXR0ZXI/OiAoXG4gICAgcmVxdWVzdD86IEh0dHBSZXF1ZXN0PGFueT5cbiAgKSA9PiBzdHJpbmcgfCBudWxsIHwgUHJvbWlzZTxzdHJpbmcgfCBudWxsPjtcbiAgaGVhZGVyTmFtZT86IHN0cmluZztcbiAgYXV0aFNjaGVtZT86IHN0cmluZyB8ICgocmVxdWVzdD86IEh0dHBSZXF1ZXN0PGFueT4pID0+IHN0cmluZyk7XG4gIHdoaXRlbGlzdGVkRG9tYWlucz86IEFycmF5PHN0cmluZyB8IFJlZ0V4cD47XG4gIGJsYWNrbGlzdGVkUm91dGVzPzogQXJyYXk8c3RyaW5nIHwgUmVnRXhwPjtcbiAgdGhyb3dOb1Rva2VuRXJyb3I/OiBib29sZWFuO1xuICBza2lwV2hlbkV4cGlyZWQ/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBKd3RNb2R1bGVPcHRpb25zIHtcbiAgand0T3B0aW9uc1Byb3ZpZGVyPzogUHJvdmlkZXI7XG4gIGNvbmZpZz86IEp3dENvbmZpZztcbn1cblxuQE5nTW9kdWxlKClcbmV4cG9ydCBjbGFzcyBKd3RNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwYXJlbnRNb2R1bGU6IEp3dE1vZHVsZSkge1xuICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJKd3RNb2R1bGUgaXMgYWxyZWFkeSBsb2FkZWQuIEl0IHNob3VsZCBvbmx5IGJlIGltcG9ydGVkIGluIHlvdXIgYXBwbGljYXRpb24ncyBtYWluIG1vZHVsZS5cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIGZvclJvb3Qob3B0aW9uczogSnd0TW9kdWxlT3B0aW9ucyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Snd0TW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBKd3RNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxuICAgICAgICAgIHVzZUNsYXNzOiBKd3RJbnRlcmNlcHRvcixcbiAgICAgICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9ucy5qd3RPcHRpb25zUHJvdmlkZXIgfHwge1xuICAgICAgICAgIHByb3ZpZGU6IEpXVF9PUFRJT05TLFxuICAgICAgICAgIHVzZVZhbHVlOiBvcHRpb25zLmNvbmZpZyxcbiAgICAgICAgfSxcbiAgICAgICAgSnd0SGVscGVyU2VydmljZSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuIl19